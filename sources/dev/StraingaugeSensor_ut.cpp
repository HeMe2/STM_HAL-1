// SPDX-License-Identifier: GPL-3.0
/*
 * Copyright (c) 2014-2018 Nils Weiss
 */

#include "unittest.h"
#include <cmath>
#include <cstdlib>
#include <cstdio>

#include "StraingaugeSensor.h"

#include <array>
#include <utility>

#define __realdatatest 0
#define __testdatatest 1

uint32_t data = 0;

//--------------------------BUFFERS--------------------------

auto g_Realdatastep = 0;
auto g_Testdatastep = 0;
const auto g_length = 2955;

//---------------------------real-data------------------------
std::array<float, g_length> Realdata
{{
     1.439722, 1.484033, 1.497729, 1.495312, 1.503369, 1.499341, 1.504980, 1.501758, 1.507397, 1.501758, 1.507397,
     1.503369, 1.508203, 1.503369, 1.509814, 1.502563, 1.507397, 1.502563, 1.509009, 1.505786, 1.513843, 1.511426,
     1.516260, 1.511426, 1.516260, 1.510620, 1.515454, 1.511426, 1.519482, 1.517065, 1.525928, 1.523511, 1.532373,
     1.528345, 1.530762, 1.524316, 1.525928, 1.518677, 1.521899, 1.516260, 1.521899, 1.517871, 1.524316, 1.520288,
     1.526733, 1.523511, 1.528345, 1.524316, 1.530762, 1.528345, 1.533179, 1.528345, 1.532373, 1.527539, 1.529956,
     1.521899, 1.525122, 1.518677, 1.522705, 1.517065, 1.520288, 1.514648, 1.520288, 1.515454, 1.520288, 1.513843,
     1.518677, 1.513037, 1.517065, 1.513843, 1.519482, 1.516260, 1.522705, 1.520288, 1.526733, 1.524316, 1.533179,
     1.529956, 1.536401, 1.532373, 1.535596, 1.529150, 1.531567, 1.525122, 1.528345, 1.522705, 1.525122, 1.519482,
     1.523511, 1.517871, 1.522705, 1.517871, 1.522705, 1.519482, 1.525928, 1.523511, 1.531567, 1.529956, 1.536401,
     1.534790, 1.539624, 1.536401, 1.541235, 1.536401, 1.540430, 1.536401, 1.539624, 1.533984, 1.538013, 1.532373,
     1.536401, 1.531567, 1.535596, 1.529956, 1.533984, 1.529956, 1.532373, 1.528345, 1.532373, 1.526733, 1.531567,
     1.526733, 1.530762, 1.525122, 1.527539, 1.521899, 1.524316, 1.517871, 1.521094, 1.513843, 1.517065, 1.511426,
     1.515454, 1.512231, 1.514648, 1.510620, 1.513843, 1.509814, 1.512231, 1.505786, 1.508203, 1.502563, 1.504980,
     1.499341, 1.504175, 1.499341, 1.504175, 1.500952, 1.507397, 1.505786, 1.511426, 1.507397, 1.513843, 1.512231,
     1.517871, 1.513843, 1.521094, 1.517065, 1.522705, 1.518677, 1.523511, 1.519482, 1.521899, 1.517065, 1.520288,
     1.516260, 1.520288, 1.515454, 1.521094, 1.517871, 1.522705, 1.517871, 1.521094, 1.517065, 1.521899, 1.517065,
     1.521899, 1.517065, 1.521094, 1.517065, 1.521094, 1.516260, 1.521094, 1.515454, 1.520288, 1.514648, 1.517871,
     1.512231, 1.513843, 1.510620, 1.514648, 1.510620, 1.514648, 1.510620, 1.514648, 1.510620, 1.513843, 1.510620,
     1.515454, 1.511426, 1.516260, 1.512231, 1.516260, 1.513843, 1.517065, 1.513037, 1.517065, 1.513843, 1.517065,
     1.513843, 1.517871, 1.514648, 1.517871, 1.513843, 1.517065, 1.513037, 1.517065, 1.513843, 1.517871, 1.515454,
     1.518677, 1.516260, 1.519482, 1.516260, 1.520288, 1.517871, 1.521899, 1.518677, 1.523511, 1.519482, 1.523511,
     1.519482, 1.523511, 1.518677, 1.523511, 1.519482, 1.522705, 1.520288, 1.522705, 1.520288, 1.522705, 1.520288,
     1.522705, 1.519482, 1.522705, 1.519482, 1.524316, 1.520288, 1.523511, 1.521094, 1.523511, 1.520288, 1.523511,
     1.521899, 1.524316, 1.521899, 1.524316, 1.520288, 1.524316, 1.520288, 1.524316, 1.520288, 1.523511, 1.520288,
     1.522705, 1.519482, 1.521899, 1.518677, 1.521094, 1.518677, 1.521899, 1.517871, 1.520288, 1.516260, 1.519482,
     1.517065, 1.520288, 1.517871, 1.521094, 1.517871, 1.520288, 1.517871, 1.521899, 1.517065, 1.520288, 1.517065,
     1.518677, 1.515454, 1.517871, 1.514648, 1.517065, 1.513843, 1.516260, 1.513843, 1.516260, 1.513037, 1.515454,
     1.513037, 1.514648, 1.513037, 1.516260, 1.513037, 1.515454, 1.513843, 1.515454, 1.513843, 1.517065, 1.513843,
     1.517065, 1.514648, 1.516260, 1.513843, 1.517065, 1.514648, 1.516260, 1.513037, 1.515454, 1.512231, 1.514648,
     1.511426, 1.514648, 1.513037, 1.514648, 1.513037, 1.515454, 1.513843, 1.517065, 1.514648, 1.517065, 1.514648,
     1.516260, 1.513843, 1.515454, 1.513843, 1.517065, 1.513843, 1.516260, 1.513843, 1.516260, 1.513843, 1.516260,
     1.513843, 1.517065, 1.514648, 1.516260, 1.514648, 1.516260, 1.514648, 1.516260, 1.515454, 1.517065, 1.514648,
     1.516260, 1.513843, 1.516260, 1.513843, 1.514648, 1.513843, 1.515454, 1.513843, 1.514648, 1.512231, 1.513843,
     1.512231, 1.513037, 1.510620, 1.513843, 1.511426, 1.513037, 1.512231, 1.512231, 1.512231, 1.513843, 1.510620,
     1.513037, 1.512231, 1.513843, 1.513037, 1.514648, 1.512231, 1.513037, 1.512231, 1.514648, 1.513037, 1.514648,
     1.513843, 1.513843, 1.512231, 1.514648, 1.513037, 1.514648, 1.513037, 1.514648, 1.512231, 1.514648, 1.513037,
     1.513843, 1.512231, 1.513037, 1.511426, 1.513843, 1.510620, 1.511426, 1.509814, 1.510620, 1.509009, 1.509814,
     1.508203, 1.509009, 1.506592, 1.507397, 1.505786, 1.507397, 1.505786, 1.505786, 1.504175, 1.504175, 1.501758,
     1.502563, 1.500147, 1.500952, 1.499341, 1.498535, 1.497729, 1.497729, 1.496118, 1.497729, 1.494507, 1.493701,
     1.490479, 1.490479, 1.487256, 1.487256, 1.484839, 1.485644, 1.485644, 1.485644, 1.484839, 1.485644, 1.483227,
     1.483227, 1.481616, 1.481616, 1.479199, 1.479199, 1.478394, 1.479199, 1.479199, 1.480005, 1.480005, 1.480811,
     1.479199, 1.479199, 1.478394, 1.479199, 1.478394, 1.480005, 1.479199, 1.479199, 1.477588, 1.477588, 1.476782,
     1.478394, 1.478394, 1.480005, 1.480005, 1.481616, 1.483227, 1.485644, 1.485644, 1.488062, 1.488867, 1.492090,
     1.494507, 1.499341, 1.504175, 1.509009, 1.512231, 1.517065, 1.521094, 1.525122, 1.529150, 1.533179, 1.538013,
     1.542847, 1.546069, 1.552515, 1.556543, 1.562183, 1.568628, 1.574268, 1.581519, 1.589575, 1.598437, 1.604883,
     1.613745, 1.620996, 1.626636, 1.629858, 1.635498, 1.639526, 1.645166, 1.651611, 1.657251, 1.663696, 1.670947,
     1.678198, 1.688672, 1.695923, 1.705591, 1.716064, 1.724927, 1.732983, 1.743457, 1.752319, 1.760376, 1.767627,
     1.771655, 1.775684, 1.777295, 1.778906, 1.778101, 1.779712, 1.780518, 1.779712, 1.778906, 1.778101, 1.777295,
     1.778101, 1.778906, 1.778101, 1.778906, 1.779712, 1.782129, 1.779712, 1.778906, 1.774072, 1.769238, 1.763599,
     1.761182, 1.757959, 1.758765, 1.760376, 1.762793, 1.767627, 1.770044, 1.774072, 1.776489, 1.777295, 1.780518,
     1.781323, 1.783740, 1.781323, 1.780518, 1.777295, 1.775684, 1.772461, 1.770044, 1.767627, 1.766821, 1.764404,
     1.763599, 1.760376, 1.758765, 1.757959, 1.761182, 1.762793, 1.767627, 1.770850, 1.772461, 1.773267, 1.774878,
     1.776489, 1.778906, 1.778906, 1.782935, 1.784546, 1.786963, 1.789380, 1.790991, 1.787768, 1.789380, 1.786963,
     1.788574, 1.787768, 1.789380, 1.788574, 1.790186, 1.788574, 1.790991, 1.789380, 1.790991, 1.789380, 1.790991,
     1.790991, 1.791797, 1.791797, 1.791797, 1.791797, 1.791797, 1.790991, 1.790991, 1.788574, 1.790186, 1.787768,
     1.788574, 1.787768, 1.787768, 1.785352, 1.786157, 1.783740, 1.782935, 1.781323, 1.782935, 1.782935, 1.786157,
     1.788574, 1.792603, 1.792603, 1.795825, 1.794214, 1.795020, 1.791797, 1.792603, 1.789380, 1.791797, 1.791797,
     1.794214, 1.795020, 1.797436, 1.796631, 1.796631, 1.794214, 1.795020, 1.790991, 1.789380, 1.785352, 1.784546,
     1.782129, 1.784546, 1.783740, 1.786963, 1.786963, 1.788574, 1.787768, 1.790186, 1.788574, 1.790991, 1.790186,
     1.792603, 1.792603, 1.796631, 1.796631, 1.802271, 1.803882, 1.809521, 1.810327, 1.816772, 1.816772, 1.821606,
     1.820801, 1.824023, 1.824023, 1.826440, 1.824829, 1.827246, 1.826440, 1.830469, 1.829663, 1.835303, 1.834497,
     1.838525, 1.837720, 1.840942, 1.839331, 1.840942, 1.840137, 1.841748, 1.840137, 1.843359, 1.840942, 1.844165,
     1.840942, 1.842554, 1.840137, 1.840942, 1.837720, 1.840137, 1.838525, 1.840942, 1.840137, 1.843359, 1.841748,
     1.843359, 1.839331, 1.838525, 1.832886, 1.831274, 1.825635, 1.827246, 1.824023, 1.828052, 1.827246, 1.832886,
     1.832080, 1.837720, 1.835303, 1.836914, 1.831274, 1.828857, 1.820801, 1.816772, 1.808716, 1.807104, 1.800659,
     1.801465, 1.797436, 1.799048, 1.794214, 1.795825, 1.789380, 1.787768, 1.779712, 1.775684, 1.765210, 1.760376,
     1.750708, 1.745874, 1.737012, 1.733789, 1.724927, 1.720898, 1.712036, 1.708813, 1.698340, 1.695117, 1.684644,
     1.680615, 1.671753, 1.668530, 1.658862, 1.656445, 1.647583, 1.644360, 1.635498, 1.632275, 1.622607, 1.618579,
     1.610522, 1.609717, 1.602466, 1.603271, 1.595215, 1.593603, 1.584741, 1.584741, 1.578296, 1.575879, 1.568628,
     1.566211, 1.558154, 1.557349, 1.550903, 1.550903, 1.541235, 1.539624, 1.532373, 1.533179, 1.529956, 1.533179,
     1.532373, 1.536401, 1.531567, 1.533984, 1.529956, 1.529956, 1.526733, 1.529956, 1.527539, 1.529956, 1.528345,
     1.531567, 1.529956, 1.533984, 1.530762, 1.535596, 1.530762, 1.533984, 1.530762, 1.534790, 1.533179, 1.538818,
     1.538013, 1.545264, 1.545264, 1.552515, 1.550098, 1.555737, 1.556543, 1.562183, 1.561377, 1.566211, 1.564600,
     1.569434, 1.567017, 1.573462, 1.571851, 1.575879, 1.573462, 1.579907, 1.576685, 1.582324, 1.579907, 1.583935,
     1.583935, 1.588770, 1.586352, 1.588770, 1.585547, 1.590381, 1.587964, 1.591187, 1.587158, 1.592798, 1.587964,
     1.592798, 1.588770, 1.593603, 1.590381, 1.594409, 1.592798, 1.596020, 1.592798, 1.596826, 1.591992, 1.594409,
     1.589575, 1.592798, 1.589575, 1.592798, 1.589575, 1.593603, 1.591187, 1.596020, 1.592798, 1.596826, 1.591992,
     1.596020, 1.589575, 1.594409, 1.590381, 1.595215, 1.591187, 1.596826, 1.593603, 1.597632, 1.594409, 1.598437,
     1.592798, 1.596826, 1.592798, 1.594409, 1.590381, 1.593603, 1.588770, 1.592798, 1.589575, 1.593603, 1.588770,
     1.593603, 1.587964, 1.591992, 1.587964, 1.591187, 1.586352, 1.589575, 1.585547, 1.589575, 1.585547, 1.591187,
     1.586352, 1.591187, 1.587158, 1.591187, 1.588770, 1.591187, 1.587964, 1.591992, 1.587964, 1.591187, 1.587158,
     1.591187, 1.586352, 1.590381, 1.585547, 1.590381, 1.586352, 1.590381, 1.587158, 1.591187, 1.587158, 1.592798,
     1.587158, 1.591187, 1.586352, 1.591187, 1.587964, 1.591992, 1.587964, 1.593603, 1.589575, 1.594409, 1.589575,
     1.594409, 1.588770, 1.593603, 1.589575, 1.594409, 1.589575, 1.593603, 1.588770, 1.592798, 1.587158, 1.592798,
     1.587158, 1.591992, 1.587158, 1.590381, 1.584741, 1.589575, 1.583130, 1.588770, 1.584741, 1.589575, 1.584741,
     1.588770, 1.583935, 1.587158, 1.581519, 1.586352, 1.580713, 1.585547, 1.581519, 1.587158, 1.581519, 1.586352,
     1.580713, 1.585547, 1.579907, 1.584741, 1.581519, 1.586352, 1.582324, 1.587158, 1.583130, 1.587964, 1.582324,
     1.586352, 1.581519, 1.584741, 1.579102, 1.584741, 1.579907, 1.586352, 1.582324, 1.587964, 1.584741, 1.589575,
     1.584741, 1.590381, 1.583935, 1.587964, 1.583130, 1.587964, 1.583130, 1.587964, 1.583130, 1.587964, 1.584741,
     1.589575, 1.584741, 1.589575, 1.584741, 1.588770, 1.583935, 1.587964, 1.582324, 1.588770, 1.583935, 1.588770,
     1.583935, 1.589575, 1.585547, 1.590381, 1.586352, 1.591187, 1.586352, 1.591992, 1.587158, 1.591187, 1.587158,
     1.591187, 1.586352, 1.591187, 1.585547, 1.590381, 1.585547, 1.591187, 1.587158, 1.592798, 1.587158, 1.592798,
     1.587158, 1.591992, 1.586352, 1.591187, 1.584741, 1.590381, 1.584741, 1.591187, 1.585547, 1.591187, 1.585547,
     1.591187, 1.584741, 1.590381, 1.585547, 1.590381, 1.584741, 1.590381, 1.584741, 1.589575, 1.584741, 1.589575,
     1.583935, 1.588770, 1.584741, 1.590381, 1.584741, 1.588770, 1.583935, 1.589575, 1.583935, 1.589575, 1.583935,
     1.588770, 1.583935, 1.588770, 1.583130, 1.588770, 1.583130, 1.588770, 1.583935, 1.589575, 1.584741, 1.591187,
     1.585547, 1.591187, 1.586352, 1.591992, 1.586352, 1.591187, 1.585547, 1.591187, 1.586352, 1.591187, 1.585547,
     1.591187, 1.585547, 1.591992, 1.586352, 1.590381, 1.585547, 1.590381, 1.584741, 1.590381, 1.584741, 1.590381,
     1.585547, 1.591187, 1.587158, 1.593603, 1.587964, 1.594409, 1.587964, 1.592798, 1.587158, 1.593603, 1.587158,
     1.592798, 1.587158, 1.592798, 1.587964, 1.593603, 1.588770, 1.595215, 1.589575, 1.595215, 1.590381, 1.596020,
     1.591992, 1.596826, 1.591992, 1.596826, 1.591992, 1.599243, 1.595215, 1.601660, 1.598437, 1.604883, 1.600855,
     1.607300, 1.601660, 1.608911, 1.603271, 1.609717, 1.604883, 1.610522, 1.605688, 1.611328, 1.607300, 1.613745,
     1.610522, 1.617773, 1.613745, 1.620190, 1.614551, 1.619385, 1.613745, 1.617773, 1.613745, 1.618579, 1.613745,
     1.619385, 1.613745, 1.619385, 1.614551, 1.618579, 1.612939, 1.617773, 1.610522, 1.617773, 1.611328, 1.616162,
     1.611328, 1.616162, 1.610522, 1.614551, 1.608105, 1.612939, 1.606494, 1.610522, 1.604883, 1.609717, 1.604077,
     1.607300, 1.600049, 1.603271, 1.596020, 1.600049, 1.593603, 1.597632, 1.590381, 1.593603, 1.584741, 1.587964,
     1.579102, 1.579907, 1.571045, 1.573462, 1.563794, 1.568628, 1.560571, 1.563794, 1.558154, 1.562988, 1.557349,
     1.562183, 1.556543, 1.560571, 1.555737, 1.561377, 1.556543, 1.560571, 1.550903, 1.552515, 1.542847, 1.546069,
     1.538818, 1.541235, 1.533179, 1.536401, 1.529150, 1.532373, 1.525122, 1.528345, 1.522705, 1.529956, 1.526733,
     1.533179, 1.527539, 1.534790, 1.530762, 1.538818, 1.535596, 1.544458, 1.542847, 1.550098, 1.546069, 1.550903,
     1.546875, 1.552515, 1.545264, 1.548486, 1.542041, 1.546069, 1.539624, 1.542847, 1.536401, 1.540430, 1.533179,
     1.538013, 1.531567, 1.538013, 1.535596, 1.542847, 1.541235, 1.546875, 1.542847, 1.546875, 1.538818, 1.542041,
     1.533984, 1.536401, 1.530762, 1.536401, 1.533984, 1.542847, 1.540430, 1.545264, 1.539624, 1.542041, 1.534790,
     1.535596, 1.526733, 1.529150, 1.522705, 1.528345, 1.523511, 1.530762, 1.527539, 1.533179, 1.528345, 1.531567,
     1.524316, 1.526733, 1.521094, 1.524316, 1.519482, 1.524316, 1.519482, 1.522705, 1.517065, 1.519482, 1.513037,
     1.518677, 1.515454, 1.524316, 1.524316, 1.534790, 1.530762, 1.536401, 1.530762, 1.533179, 1.526733, 1.529956,
     1.524316, 1.527539, 1.523511, 1.528345, 1.523511, 1.529150, 1.523511, 1.527539, 1.521899, 1.525928, 1.520288,
     1.522705, 1.516260, 1.520288, 1.514648, 1.519482, 1.513843, 1.519482, 1.514648, 1.518677, 1.513843, 1.517871,
     1.512231, 1.517871, 1.509814, 1.514648, 1.509814, 1.514648, 1.512231, 1.520288, 1.518677, 1.525928, 1.523511,
     1.526733, 1.521899, 1.522705, 1.514648, 1.516260, 1.508203, 1.512231, 1.505786, 1.511426, 1.506592, 1.508203,
     1.502563, 1.504175, 1.496118, 1.496118, 1.487256, 1.488062, 1.481616, 1.485644, 1.481616, 1.484839, 1.478394,
     1.477588, 1.467114, 1.467114, 1.457446, 1.458252, 1.450195, 1.449390, 1.439722, 1.438916, 1.430054, 1.431665,
     1.426025, 1.430054, 1.426025, 1.431665, 1.428442, 1.434082, 1.431665, 1.437305, 1.434082, 1.437305, 1.430054,
     1.431665, 1.423608, 1.425220, 1.417163, 1.420386, 1.415552, 1.421191, 1.418774, 1.425220, 1.424414, 1.432471,
     1.430054, 1.435693, 1.434082, 1.440527, 1.438916, 1.446973, 1.449390, 1.459058, 1.461475, 1.471948, 1.472754,
     1.484033, 1.487256, 1.498535, 1.503369, 1.514648, 1.520288, 1.533179, 1.540430, 1.554932, 1.560571, 1.572656,
     1.577490, 1.587158, 1.588770, 1.596020, 1.597632, 1.606494, 1.608105, 1.616968, 1.616968, 1.625830, 1.625830,
     1.633081, 1.631470, 1.635498, 1.632275, 1.633081, 1.625830, 1.625024, 1.618579, 1.618579, 1.612134, 1.615356,
     1.611328, 1.615356, 1.610522, 1.616162, 1.610522, 1.612134, 1.604077, 1.603271, 1.595215, 1.592798, 1.583935,
     1.581519, 1.572656, 1.568628, 1.560571, 1.558154, 1.549292, 1.549292, 1.542847, 1.545264, 1.538818, 1.539624,
     1.535596, 1.538013, 1.534790, 1.537207, 1.533984, 1.536401, 1.532373, 1.537207, 1.535596, 1.538013, 1.534790,
     1.538818, 1.535596, 1.538818, 1.535596, 1.538818, 1.535596, 1.538818, 1.534790, 1.536401, 1.533179, 1.535596,
     1.533984, 1.537207, 1.533179, 1.535596, 1.532373, 1.535596, 1.533179, 1.536401, 1.535596, 1.541235, 1.541235,
     1.546069, 1.544458, 1.549292, 1.547681, 1.552515, 1.550903, 1.554932, 1.552515, 1.555737, 1.555737, 1.559766,
     1.557349, 1.562183, 1.562183, 1.567017, 1.566211, 1.571045, 1.570239, 1.575073, 1.571851, 1.576685, 1.574268,
     1.576685, 1.572656, 1.575073, 1.571851, 1.574268, 1.571851, 1.575073, 1.572656, 1.576685, 1.574268, 1.576685,
     1.572656, 1.575073, 1.571045, 1.574268, 1.570239, 1.573462, 1.570239, 1.574268, 1.571851, 1.575073, 1.571851,
     1.575073, 1.573462, 1.576685, 1.573462, 1.575879, 1.574268, 1.576685, 1.575073, 1.576685, 1.572656, 1.575073,
     1.571851, 1.574268, 1.571045, 1.573462, 1.571851, 1.573462, 1.571851, 1.573462, 1.571851, 1.572656, 1.570239,
     1.571851, 1.570239, 1.571851, 1.569434, 1.571851, 1.570239, 1.571851, 1.570239, 1.571045, 1.567822, 1.569434,
     1.566211, 1.567017, 1.565405, 1.566211, 1.563794, 1.567017, 1.563794, 1.566211, 1.564600, 1.567822, 1.566211,
     1.569434, 1.568628, 1.571851, 1.569434, 1.571851, 1.569434, 1.571045, 1.569434, 1.570239, 1.569434, 1.571045,
     1.568628, 1.570239, 1.569434, 1.571045, 1.571045, 1.572656, 1.571045, 1.573462, 1.571045, 1.571851, 1.568628,
     1.570239, 1.569434, 1.570239, 1.568628, 1.569434, 1.567017, 1.567822, 1.565405, 1.566211, 1.563794, 1.564600,
     1.562183, 1.562183, 1.560571, 1.561377, 1.558960, 1.560571, 1.558960, 1.560571, 1.558960, 1.559766, 1.558960,
     1.559766, 1.557349, 1.558154, 1.555737, 1.556543, 1.555737, 1.555737, 1.554932, 1.554932, 1.554126, 1.555737,
     1.554126, 1.554932, 1.553320, 1.553320, 1.552515, 1.553320, 1.551709, 1.551709, 1.550098, 1.550098, 1.549292,
     1.551709, 1.550903, 1.551709, 1.550098, 1.550903, 1.550098, 1.549292, 1.548486, 1.550098, 1.549292, 1.549292,
     1.548486, 1.549292, 1.549292, 1.548486, 1.548486, 1.549292, 1.548486, 1.549292, 1.548486, 1.549292, 1.548486,
     1.550098, 1.549292, 1.550903, 1.550903, 1.551709, 1.550903, 1.551709, 1.550903, 1.552515, 1.550903, 1.551709,
     1.551709, 1.551709, 1.550903, 1.549292, 1.549292, 1.548486, 1.547681, 1.548486, 1.548486, 1.549292, 1.548486,
     1.548486, 1.549292, 1.549292, 1.549292, 1.549292, 1.549292, 1.550098, 1.550903, 1.550903, 1.551709, 1.551709,
     1.552515, 1.552515, 1.552515, 1.552515, 1.552515, 1.553320, 1.553320, 1.554126, 1.553320, 1.552515, 1.551709,
     1.551709, 1.550903, 1.551709, 1.551709, 1.551709, 1.551709, 1.551709, 1.551709, 1.551709, 1.551709, 1.550098,
     1.550098, 1.550098, 1.550098, 1.550098, 1.550098, 1.550098, 1.550098, 1.549292, 1.549292, 1.549292, 1.550098,
     1.549292, 1.549292, 1.549292, 1.550098, 1.549292, 1.549292, 1.550098, 1.549292, 1.549292, 1.549292, 1.546069,
     1.547681, 1.546875, 1.546875, 1.546875, 1.546875, 1.546069, 1.546875, 1.546069, 1.546069, 1.546069, 1.546875,
     1.546875, 1.546875, 1.547681, 1.547681, 1.547681, 1.548486, 1.547681, 1.547681, 1.546875, 1.548486, 1.547681,
     1.547681, 1.546875, 1.547681, 1.546069, 1.547681, 1.546069, 1.546069, 1.546069, 1.546069, 1.546069, 1.546875,
     1.546069, 1.546875, 1.546069, 1.547681, 1.546069, 1.547681, 1.546875, 1.547681, 1.547681, 1.549292, 1.547681,
     1.547681, 1.546069, 1.547681, 1.546875, 1.549292, 1.547681, 1.550098, 1.549292, 1.551709, 1.550098, 1.551709,
     1.551709, 1.552515, 1.551709, 1.551709, 1.551709, 1.552515, 1.550903, 1.552515, 1.551709, 1.552515, 1.551709,
     1.552515, 1.551709, 1.552515, 1.550903, 1.552515, 1.551709, 1.552515, 1.551709, 1.552515, 1.552515, 1.554126,
     1.553320, 1.553320, 1.552515, 1.554126, 1.552515, 1.554126, 1.552515, 1.554126, 1.553320, 1.554932, 1.553320,
     1.554126, 1.552515, 1.553320, 1.551709, 1.552515, 1.551709, 1.552515, 1.551709, 1.553320, 1.551709, 1.552515,
     1.550098, 1.551709, 1.550098, 1.551709, 1.550098, 1.550903, 1.548486, 1.550098, 1.547681, 1.550098, 1.547681,
     1.548486, 1.546069, 1.546875, 1.545264, 1.546875, 1.545264, 1.546875, 1.546069, 1.545264, 1.542847, 1.542847,
     1.538818, 1.539624, 1.535596, 1.537207, 1.533984, 1.535596, 1.534790, 1.535596, 1.533179, 1.533179, 1.529150,
     1.529150, 1.525122, 1.525928, 1.523511, 1.525928, 1.523511, 1.527539, 1.525122, 1.526733, 1.523511, 1.523511,
     1.520288, 1.521094, 1.518677, 1.521899, 1.520288, 1.523511, 1.522705, 1.526733, 1.525122, 1.528345, 1.526733,
     1.529956, 1.528345, 1.530762, 1.529150, 1.533179, 1.533984, 1.539624, 1.539624, 1.546069, 1.548486, 1.554126,
     1.554126, 1.558960, 1.558154, 1.562183, 1.559766, 1.561377, 1.558960, 1.562183, 1.561377, 1.564600, 1.561377,
     1.563794, 1.560571, 1.564600, 1.562183, 1.564600, 1.562183, 1.566211, 1.564600, 1.568628, 1.566211, 1.571045,
     1.568628, 1.572656, 1.571045, 1.575073, 1.571851, 1.575073, 1.571851, 1.575073, 1.573462, 1.578296, 1.577490,
     1.583130, 1.582324, 1.587158, 1.585547, 1.588770, 1.587964, 1.593603, 1.591992, 1.597632, 1.595215, 1.599243,
     1.598437, 1.602466, 1.601660, 1.607300, 1.607300, 1.612134, 1.612939, 1.619385, 1.618579, 1.625830, 1.627441,
     1.637109, 1.638721, 1.648389, 1.649194, 1.658057, 1.660474, 1.667725, 1.668530, 1.676587, 1.677393, 1.686255,
     1.687866, 1.696728, 1.697534, 1.706396, 1.708008, 1.716870, 1.717676, 1.724927, 1.724121, 1.732178, 1.732178,
     1.740234, 1.741040, 1.748291, 1.747485, 1.754736, 1.754736, 1.759570, 1.757153, 1.763599, 1.762793, 1.768433,
     1.767627, 1.774072, 1.772461, 1.778101, 1.774878, 1.778906, 1.774878, 1.778906, 1.774072, 1.778101, 1.775684,
     1.781323, 1.778906, 1.782935, 1.778906, 1.781323, 1.775684, 1.779712, 1.773267, 1.777295, 1.774072, 1.778906,
     1.775684, 1.779712, 1.778101, 1.781323, 1.778906, 1.782129, 1.777295, 1.783740, 1.779712, 1.783740, 1.779712,
     1.783740, 1.780518, 1.784546, 1.782129, 1.786963, 1.782129, 1.786963, 1.782129, 1.786157, 1.780518, 1.783740,
     1.778906, 1.780518, 1.774072, 1.777295, 1.771655, 1.775684, 1.771655, 1.775684, 1.771655, 1.774878, 1.769238,
     1.773267, 1.768433, 1.771655, 1.766016, 1.769238, 1.764404, 1.768433, 1.762793, 1.766016, 1.761182, 1.765210,
     1.761182, 1.764404, 1.760376, 1.764404, 1.759570, 1.764404, 1.758765, 1.763599, 1.760376, 1.765210, 1.760376,
     1.765210, 1.761182, 1.765210, 1.757959, 1.762793, 1.757959, 1.761987, 1.757959, 1.761987, 1.758765, 1.762793,
     1.757959, 1.762793, 1.758765, 1.763599, 1.760376, 1.765210, 1.761987, 1.766821, 1.764404, 1.769238, 1.766016,
     1.770850, 1.767627, 1.774072, 1.770850, 1.776489, 1.773267, 1.779712, 1.775684, 1.781323, 1.778906, 1.784546,
     1.781323, 1.787768, 1.784546, 1.790186, 1.788574, 1.794214, 1.790186, 1.795825, 1.791797, 1.796631, 1.792603,
     1.797436, 1.794214, 1.799048, 1.794214, 1.799048, 1.795020, 1.799853, 1.794214, 1.797436, 1.792603, 1.796631,
     1.790991, 1.794214, 1.788574, 1.791797, 1.783740, 1.784546, 1.775684, 1.775684, 1.766821, 1.767627, 1.759570,
     1.760376, 1.752319, 1.754736, 1.745874, 1.748291, 1.740234, 1.741846, 1.733789, 1.736206, 1.728149, 1.731372,
     1.723315, 1.727344, 1.718481, 1.720093, 1.712036, 1.714453, 1.707202, 1.710425, 1.702368, 1.703979, 1.695923,
     1.696728, 1.687866, 1.688672, 1.681421, 1.682227, 1.674976, 1.677393, 1.667725, 1.669336, 1.659668, 1.659668,
     1.649194, 1.650806, 1.640332, 1.642749, 1.633081, 1.634692, 1.625830, 1.627441, 1.618579, 1.618579, 1.608911,
     1.609717, 1.602466, 1.604077, 1.596020, 1.597632, 1.587964, 1.588770, 1.580713, 1.583130, 1.577490, 1.580713,
     1.573462, 1.575073, 1.567017, 1.568628, 1.559766, 1.560571, 1.551709, 1.551709, 1.543652, 1.544458, 1.536401,
     1.539624, 1.532373, 1.533984, 1.527539, 1.530762, 1.524316, 1.528345, 1.521899, 1.525122, 1.517065, 1.521094,
     1.513843, 1.517871, 1.513037, 1.518677, 1.513037, 1.518677, 1.513843, 1.520288, 1.514648, 1.521094, 1.517065,
     1.522705, 1.517871, 1.523511, 1.521094, 1.527539, 1.523511, 1.531567, 1.528345, 1.533984, 1.530762, 1.537207,
     1.533179, 1.539624, 1.535596, 1.542041, 1.539624, 1.546069, 1.542041, 1.549292, 1.545264, 1.550903, 1.546069,
     1.551709, 1.546069, 1.551709, 1.546069, 1.552515, 1.546069, 1.553320, 1.549292, 1.554126, 1.549292, 1.554932,
     1.551709, 1.558154, 1.554126, 1.559766, 1.556543, 1.561377, 1.556543, 1.562183, 1.557349, 1.563794, 1.559766,
     1.565405, 1.559766, 1.567017, 1.562183, 1.567822, 1.562183, 1.568628, 1.563794, 1.571045, 1.565405, 1.571851,
     1.567822, 1.572656, 1.568628, 1.572656, 1.566211, 1.569434, 1.563794, 1.568628, 1.562988, 1.567822, 1.561377,
     1.566211, 1.561377, 1.565405, 1.559766, 1.565405, 1.560571, 1.565405, 1.560571, 1.565405, 1.559766, 1.564600,
     1.558960, 1.563794, 1.558154, 1.562988, 1.558154, 1.563794, 1.558154, 1.562183, 1.555737, 1.559766, 1.555737,
     1.558960, 1.553320, 1.557349, 1.552515, 1.558154, 1.553320, 1.559766, 1.555737, 1.561377, 1.557349, 1.563794,
     1.559766, 1.565405, 1.560571, 1.567822, 1.562183, 1.568628, 1.561377, 1.567017, 1.561377, 1.565405, 1.560571,
     1.565405, 1.559766, 1.565405, 1.559766, 1.565405, 1.559766, 1.564600, 1.559766, 1.565405, 1.559766, 1.566211,
     1.560571, 1.566211, 1.561377, 1.567017, 1.562183, 1.567822, 1.562988, 1.567822, 1.562183, 1.567017, 1.562183,
     1.566211, 1.560571, 1.566211, 1.561377, 1.566211, 1.561377, 1.566211, 1.560571, 1.566211, 1.561377, 1.567017,
     1.562183, 1.567822, 1.562183, 1.567017, 1.562988, 1.567017, 1.562183, 1.568628, 1.563794, 1.568628, 1.564600,
     1.569434, 1.565405, 1.571045, 1.565405, 1.571045, 1.564600, 1.569434, 1.563794, 1.567822, 1.563794, 1.568628,
     1.563794, 1.570239, 1.564600, 1.570239, 1.565405, 1.570239, 1.564600, 1.570239, 1.565405, 1.569434, 1.565405,
     1.570239, 1.566211, 1.571851, 1.566211, 1.572656, 1.567017, 1.572656, 1.567822, 1.572656, 1.568628, 1.573462,
     1.568628, 1.573462, 1.568628, 1.573462, 1.568628, 1.572656, 1.567017, 1.571045, 1.567017, 1.571851, 1.567822,
     1.573462, 1.568628, 1.572656, 1.569434, 1.573462, 1.569434, 1.575073, 1.569434, 1.575073, 1.569434, 1.574268,
     1.569434, 1.575073, 1.570239, 1.575073, 1.569434, 1.574268, 1.570239, 1.574268, 1.568628, 1.571851, 1.567017,
     1.571851, 1.566211, 1.569434, 1.565405, 1.568628, 1.565405, 1.570239, 1.565405, 1.571045, 1.565405, 1.571045,
     1.565405, 1.569434, 1.564600, 1.567822, 1.562988, 1.567017, 1.562183, 1.566211, 1.560571, 1.565405, 1.560571,
     1.565405, 1.562183, 1.566211, 1.562183, 1.567017, 1.563794, 1.568628, 1.565405, 1.571851, 1.567822, 1.573462,
     1.569434, 1.574268, 1.570239, 1.575073, 1.572656, 1.577490, 1.574268, 1.579102, 1.575879, 1.579102, 1.575073,
     1.579907, 1.576685, 1.581519, 1.578296, 1.583935, 1.579102, 1.584741, 1.581519, 1.585547, 1.582324, 1.587158,
     1.583130, 1.587964, 1.584741, 1.589575, 1.585547, 1.590381, 1.585547, 1.590381, 1.586352, 1.590381, 1.585547,
     1.590381, 1.585547, 1.590381, 1.586352, 1.590381, 1.587158, 1.591187, 1.585547, 1.589575, 1.583935, 1.587158,
     1.582324, 1.585547, 1.580713, 1.584741, 1.580713, 1.584741, 1.579102, 1.580713, 1.575879, 1.578296, 1.571851,
     1.573462, 1.567017, 1.568628, 1.562988, 1.566211, 1.560571, 1.563794, 1.558154, 1.559766, 1.554126, 1.555737,
     1.549292, 1.548486, 1.542847, 1.545264, 1.538013, 1.542041, 1.536401, 1.538013, 1.530762, 1.531567, 1.524316,
     1.522705, 1.513843, 1.513037, 1.504980, 1.504175, 1.495312, 1.494507, 1.486450, 1.484839, 1.475171, 1.473559,
     1.465503, 1.466309, 1.459058, 1.459058, 1.451807, 1.451807, 1.443750, 1.442944, 1.434888, 1.434888, 1.426025,
     1.425220, 1.416357, 1.413135, 1.403467, 1.402661, 1.394604, 1.396216, 1.391382, 1.397021, 1.393799, 1.399439,
     1.397827, 1.398633, 1.395410, 1.393799, 1.387354, 1.387354, 1.380908, 1.380908, 1.376074, 1.377686, 1.372851,
     1.376880, 1.372046, 1.372851, 1.368823, 1.372046, 1.367212, 1.368823, 1.364795, 1.365601, 1.360767, 1.361572,
     1.357544, 1.359961, 1.355933, 1.358350, 1.355127, 1.356738, 1.351099, 1.352710, 1.347070, 1.349487, 1.345459,
     1.348682, 1.345459, 1.348682, 1.347070, 1.351099, 1.347876, 1.351904, 1.349487, 1.353516, 1.352710, 1.355933,
     1.353516, 1.358350, 1.356738, 1.361572, 1.360767, 1.365601, 1.362378, 1.366406, 1.363184, 1.367212, 1.364795,
     1.367212, 1.363989, 1.368018, 1.367212, 1.370435, 1.368018, 1.371240, 1.368823, 1.370435, 1.366406, 1.366406,
     1.359961, 1.361572, 1.357544, 1.357544, 1.353516, 1.354321, 1.351099, 1.351904, 1.349487, 1.351099, 1.347070,
     1.349487, 1.346265, 1.346265, 1.342236, 1.343042, 1.339014, 1.340625, 1.336597, 1.337402, 1.334985, 1.338208,
     1.335791, 1.336597, 1.332568, 1.332568, 1.329346, 1.330957, 1.329346, 1.332568, 1.330151, 1.333374, 1.332568,
     1.335791, 1.333374, 1.336597, 1.336597, 1.340625, 1.339819, 1.344653, 1.345459, 1.349487, 1.351099, 1.353516,
     1.353516, 1.358350, 1.358350, 1.362378, 1.361572, 1.368018, 1.370435, 1.374463, 1.376074, 1.381714, 1.383325,
     1.388965, 1.392187, 1.397827, 1.401050, 1.408301, 1.413940, 1.420386, 1.425220, 1.432471, 1.437305, 1.445361,
     1.449390, 1.455029, 1.459058, 1.467114, 1.471143, 1.479199, 1.484839, 1.493701, 1.499341, 1.508203, 1.512231,
     1.520288, 1.524316, 1.533179, 1.539624, 1.547681, 1.553320, 1.561377, 1.568628, 1.575879, 1.581519, 1.590381,
     1.595215, 1.604883, 1.612134, 1.620996, 1.627441, 1.637915, 1.641138, 1.649194, 1.654834, 1.661279, 1.664502,
     1.669336, 1.671753, 1.675781, 1.676587, 1.680615, 1.680615, 1.682227, 1.680615, 1.682227, 1.679810, 1.679004,
     1.676587, 1.675781, 1.672559, 1.670947, 1.668530, 1.667725, 1.666113, 1.664502, 1.661279, 1.661279, 1.658057,
     1.658057, 1.654028, 1.652417, 1.648389, 1.645972, 1.641138, 1.639526, 1.633887, 1.629858, 1.625830, 1.623413,
     1.619385, 1.618579, 1.615356, 1.612939, 1.608911, 1.608105, 1.604883, 1.603271, 1.600855, 1.599243, 1.596020,
     1.596826, 1.594409, 1.592798, 1.591187, 1.590381, 1.587158, 1.587158, 1.586352, 1.585547, 1.583935, 1.583935,
     1.583935, 1.583130, 1.583130, 1.583130, 1.582324, 1.583935, 1.581519, 1.581519, 1.580713, 1.581519, 1.579907,
     1.579907, 1.578296, 1.579102, 1.579907, 1.579907, 1.579907, 1.579907, 1.579907, 1.579907, 1.579907, 1.579907,
     1.579907, 1.579907, 1.579102, 1.579102, 1.579907, 1.580713, 1.579907, 1.581519, 1.580713, 1.582324, 1.582324,
     1.583130, 1.583935, 1.583935, 1.583935, 1.584741, 1.586352, 1.584741, 1.585547, 1.585547, 1.586352, 1.585547,
     1.584741, 1.585547, 1.584741, 1.584741, 1.585547, 1.586352, 1.586352, 1.585547, 1.587158, 1.587158, 1.587964,
     1.587964, 1.589575, 1.587964, 1.588770, 1.587964, 1.588770, 1.588770, 1.589575, 1.587964, 1.588770, 1.587158,
     1.587158, 1.586352, 1.585547, 1.586352, 1.587158, 1.585547, 1.587158, 1.586352, 1.587964, 1.586352, 1.587158,
     1.585547, 1.585547, 1.584741, 1.585547, 1.584741, 1.584741, 1.583935, 1.584741, 1.583935, 1.584741, 1.583935,
     1.583130, 1.583130, 1.583935, 1.583130, 1.583935, 1.581519, 1.582324, 1.583130, 1.583935, 1.583130, 1.584741,
     1.584741, 1.586352, 1.584741, 1.586352, 1.586352, 1.587158, 1.585547, 1.586352, 1.584741, 1.585547, 1.584741,
     1.585547, 1.584741, 1.585547, 1.584741, 1.586352, 1.585547, 1.587158, 1.586352, 1.587964, 1.587158, 1.587964,
     1.586352, 1.587158, 1.585547, 1.587158, 1.585547, 1.586352, 1.584741, 1.586352, 1.584741, 1.586352, 1.584741,
     1.584741, 1.583130, 1.584741, 1.583935, 1.583935, 1.583130, 1.584741, 1.582324, 1.583935, 1.582324, 1.584741,
     1.582324, 1.583130, 1.581519, 1.582324, 1.580713, 1.582324, 1.581519, 1.581519, 1.579907, 1.581519, 1.579907,
     1.580713, 1.579102, 1.579907, 1.578296, 1.579102, 1.577490, 1.579102, 1.579102, 1.579907, 1.578296, 1.579907,
     1.577490, 1.579102, 1.577490, 1.578296, 1.575879, 1.575879, 1.575073,
 }};

std::array<float, 2> Testdata {{
                                   1.0, 2.0
                               }};

//--------------------------MOCKING--------------------------

constexpr const std::array<const hal::Adc, hal::Adc::Description::__ENUM__SIZE> hal::Factory<hal::Adc>::Container;
constexpr const std::array<const hal::Adc::Channel,
                           hal::Adc::Channel::__ENUM__SIZE> hal::Factory<hal::Adc>::ChannelContainer;

float hal::Adc::Channel::getVoltage() const
{
    if (data == __realdatatest) {
        return Realdata[g_Realdatastep];
    }
    if (data == __testdatatest) {
        return Testdata[g_Testdatastep];
    }
    printf("ERROR:no Mode selected\r\n");
    return 0.0;
}

//-------------------------TESTCASES-------------------------

using dev::StraingaugeSensor;

template<size_t n>
void plotLines(std::array<std::pair<float, float>, n> line1, std::array<std::pair<float, float>, n> line2)
{
#if 0
    FILE* gnuplotPipe = popen("gnuplot -persistent", "w");

    fprintf(gnuplotPipe, "set style line 1 lc rgb '#0060ad' lt 1 lw 2 pt 0 ps 1 \n");
    fprintf(gnuplotPipe, "set style line 2 lc rgb '#ad6000' lt 1 lw 2 pt 0 ps 1 \n");

    fprintf(gnuplotPipe, "set multiplot \n");
    fprintf(gnuplotPipe, "set size 1, 0.5 \n");
    fprintf(gnuplotPipe, "set origin 0.0,0.5 \n");

    fprintf(gnuplotPipe, "plot '-' with linespoints ls 1 \n");
    for (auto pair : line1) {
        fprintf(gnuplotPipe, "%lf %lf\n", pair.first, pair.second);
    }
    fprintf(gnuplotPipe, "e \n");
    fprintf(gnuplotPipe, "set origin 0.0,0.0 \n");

    fprintf(gnuplotPipe, "plot '-' with linespoints ls 2 \n");
    for (auto pair : line2) {
        fprintf(gnuplotPipe, "%lf %lf\n", pair.first, pair.second);
    }
    fprintf(gnuplotPipe, "e \n");
    fprintf(gnuplotPipe, "unset multiplot \n");
#endif
}

int ut_StraingaugeSensor()
{
    data = __realdatatest;
    TestCaseBegin();

    std::array<std::pair<float, float>, g_length> line1;
    std::array<std::pair<float, float>, g_length> line2;

    const auto& testee = dev::Factory<dev::StraingaugeSensor>::get<dev::StraingaugeSensor::STRAINGAUGESENSOR>();

    for (int i = 0; i < g_length; i++) {
        line1[i].first = i;
        line1[i].second = Realdata[i];
        line2[i].first = i;
        auto _output = testee.getDirection();
        line2[i].second = _output;
        g_Realdatastep = g_Realdatastep + 1;
    }

    plotLines(line1, line2);
    TestCaseEnd();
}

int ut_StraingaugeSensorReset()
{
    data = __realdatatest;
    TestCaseBegin();
    const auto& testee = dev::Factory<dev::StraingaugeSensor>::get<dev::StraingaugeSensor::STRAINGAUGESENSOR>();

    for (int i = 0; i < g_length / 2; i++) {
        testee.getDirection();
        g_Realdatastep = g_Realdatastep + 1;
    }
    testee.resetStraingaugeSensor();

    CHECK(testee.getDirection() >= -0.00001);
    CHECK(testee.getDirection() <= 0.00001);

    TestCaseEnd();
}

int ut_StraingaugeSensorMeanTest()
{
    data = __testdatatest;
    TestCaseBegin();

    const auto& testee = dev::Factory<dev::StraingaugeSensor>::get<dev::StraingaugeSensor::STRAINGAUGESENSOR>();
    float mean;

    std::array<std::pair<float, float>, testee.mMeanRange * 7> line1;
    std::array<std::pair<float, float>, testee.mMeanRange * 7> line2;

    g_Testdatastep = 0;
    uint32_t i = 0;
    uint32_t testsize = testee.mMeanRange;
    /*fills window with same test Samples(value = 1.0)*/
    while (i < testsize) {
        line1[i].first = i;
        line1[i].second = Testdata[g_Testdatastep];
        line2[i].first = i;
        testee.getDirection();
        mean = testee.mGlobalMean;
        line2[i].second = mean;
        CHECK(testee.mGlobalMean <= Testdata[g_Testdatastep] + 0.000001); //Mean and Testvalues need to be the same
        CHECK(testee.mGlobalMean >= Testdata[g_Testdatastep] - 0.000001);
        i++;
    }
    /*check new Mean old*/
    CHECK(testee.mMeanold <= Testdata[g_Testdatastep] + 0.000001); //Mean old need to be value of mean from the window
    CHECK(testee.mMeanold >= Testdata[g_Testdatastep] - 0.000001); //for same test Samples = test value (=1)

    /*fills window with same test Samples (value = 2.0) */
    g_Testdatastep = 1;
    testsize = testsize + testee.mMeanRange;
    while (i < testsize) {
        line1[i].first = i;
        line1[i].second = Testdata[g_Testdatastep];
        line2[i].first = i;
        testee.getDirection();
        mean = testee.mGlobalMean;
        line2[i].second = mean;
        i++;
    }
    CHECK(mean <= Testdata[g_Testdatastep] + 0.000001); //after mMeanRange samples the mean value need
    CHECK(mean >= Testdata[g_Testdatastep] - 0.000001); //to be the new test value

    CHECK(testee.mMeanold <= Testdata[g_Testdatastep] + 0.000001); //new value for oldMean need to be the test value
    CHECK(testee.mMeanold >= Testdata[g_Testdatastep] - 0.000001);

    /*fills window with same test Samples (value = 1.0)*/
    g_Testdatastep = 0;
    testsize = testsize + testee.mMeanRange;
    while (i < testsize) {
        line1[i].first = i;
        line1[i].second = Testdata[g_Testdatastep];
        line2[i].first = i;
        testee.getDirection();
        mean = testee.mGlobalMean;
        line2[i].second = mean;
        i++;
    }
    CHECK(mean <= Testdata[g_Testdatastep] + 0.000001); //after mMeanRange samples the mean value need
    CHECK(mean >= Testdata[g_Testdatastep] - 0.000001); //to be the new test value

    CHECK(testee.mMeanold <= Testdata[g_Testdatastep] + 0.000001); //new value for oldMean need to be the test value
    CHECK(testee.mMeanold >= Testdata[g_Testdatastep] - 0.000001);

    /*fills window with same test Samples (value = 1.0)*/
    /*Meanold and new test values are the same => mean and Testvalues need to be the same*/
    g_Testdatastep = 0;
    testsize = testsize + testee.mMeanRange;
    while (i < testsize) {
        line1[i].first = i;
        line1[i].second = Testdata[g_Testdatastep];
        line2[i].first = i;
        testee.getDirection();
        mean = testee.mGlobalMean;
        line2[i].second = mean;
        CHECK(testee.mGlobalMean <= Testdata[g_Testdatastep] + 0.000001); //Mean and Testvalues need to be the same
        CHECK(testee.mGlobalMean >= Testdata[g_Testdatastep] - 0.000001);
        i++;
    }
    CHECK(mean <= Testdata[g_Testdatastep] + 0.000001); //after mMeanRange samples the mean value need
    CHECK(mean >= Testdata[g_Testdatastep] - 0.000001); //to be the new test value

    CHECK(testee.mMeanold <= Testdata[g_Testdatastep] + 0.000001); //new value for oldMean need to be the test value
    CHECK(testee.mMeanold >= Testdata[g_Testdatastep] - 0.000001);

    /*fills window with same test Samples  (value = 2.0)*/
    g_Testdatastep = 1;
    testsize = testsize + testee.mMeanRange;
    while (i < testsize) {
        line1[i].first = i;
        line1[i].second = Testdata[g_Testdatastep];
        line2[i].first = i;
        testee.getDirection();
        mean = testee.mGlobalMean;
        line2[i].second = mean;
        i++;
    }
    CHECK(mean <= Testdata[g_Testdatastep] + 0.000001); //after mMeanRange samples the mean value need
    CHECK(mean >= Testdata[g_Testdatastep] - 0.000001); //to be the new test value

    CHECK(testee.mMeanold <= Testdata[g_Testdatastep] + 0.000001); //new value for oldMean need to be the test value
    CHECK(testee.mMeanold >= Testdata[g_Testdatastep] - 0.000001);

    /*fills window with same test Samples  (value = 2.0)*/
    /*Meanold and new test values are the same => mean and Testvalues need to be the same*/
    g_Testdatastep = 1;
    testsize = testsize + testee.mMeanRange;
    while (i < testsize) {
        line1[i].first = i;
        line1[i].second = Testdata[g_Testdatastep];
        line2[i].first = i;
        testee.getDirection();
        mean = testee.mGlobalMean;
        line2[i].second = mean;
        CHECK(testee.mGlobalMean <= Testdata[g_Testdatastep] + 0.000001); //Mean and Testvalues need to be the same
        CHECK(testee.mGlobalMean >= Testdata[g_Testdatastep] - 0.000001);
        i++;
    }
    CHECK(mean <= Testdata[g_Testdatastep] + 0.000001); //after mMeanRange samples the mean value need
    CHECK(mean >= Testdata[g_Testdatastep] - 0.000001); //to be the new test value

    CHECK(testee.mMeanold <= Testdata[g_Testdatastep] + 0.000001); //new value for oldMean need to be the test value
    CHECK(testee.mMeanold >= Testdata[g_Testdatastep] - 0.000001);

    /*fills window with same test Samples  (value = 1.0)*/
    g_Testdatastep = 0;
    testsize = testsize + testee.mMeanRange;
    while (i < testsize) {
        line1[i].first = i;
        line1[i].second = Testdata[g_Testdatastep];
        line2[i].first = i;
        testee.getDirection();
        mean = testee.mGlobalMean;
        line2[i].second = mean;
        i++;
    }
    CHECK(mean <= Testdata[g_Testdatastep] + 0.000001); //after mMeanRange samples the mean value need
    CHECK(mean >= Testdata[g_Testdatastep] - 0.000001); //to be the new test value

    CHECK(testee.mMeanold <= Testdata[g_Testdatastep] + 0.000001); //new value for oldMean need to be the test value
    CHECK(testee.mMeanold >= Testdata[g_Testdatastep] - 0.000001);

    plotLines(line1, line2);
    TestCaseEnd();
}

int ut_StraingaugeSensorMeanTest1()
{
    data = __testdatatest;
    TestCaseBegin();

    const auto& testee = dev::Factory<dev::StraingaugeSensor>::get<dev::StraingaugeSensor::STRAINGAUGESENSOR>();
    float mean;
    u_int32_t testsize = 0;
    u_int32_t i = 0;

    std::array<std::pair<float, float>, testee.mMeanRange * 5> line1;
    std::array<std::pair<float, float>, testee.mMeanRange * 5> line2;

    /*fills window with same test Samples  (value = 1.0)*/
    g_Testdatastep = 0;
    testsize = testsize + testee.mMeanRange;
    while (i < testsize) {
        line1[i].first = i;
        line1[i].second = Testdata[g_Testdatastep];
        line2[i].first = i;
        testee.getDirection();
        mean = testee.mGlobalMean;
        line2[i].second = mean;
        CHECK(testee.mGlobalMean <= Testdata[g_Testdatastep] + 0.000001); //Mean and Testvalues need to be the same
        CHECK(testee.mGlobalMean >= Testdata[g_Testdatastep] - 0.000001);
        i++;
    }

    CHECK(mean <= Testdata[g_Testdatastep] + 0.000001); //after mMeanRange samples the mean value need
    CHECK(mean >= Testdata[g_Testdatastep] - 0.000001); //to be the new test value

    CHECK(testee.mMeanold <= Testdata[g_Testdatastep] + 0.000001); //new value for oldMean need to be the test value
    CHECK(testee.mMeanold >= Testdata[g_Testdatastep] - 0.000001);

    /*fills half ot the window with same test Samples  (value = 1.0)*/
    /*Meanold and new test values are the same => mean and test values need to be the same*/
    g_Testdatastep = 0;
    testsize = testsize + 0.5 * testee.mMeanRange;
    while (i < testsize) {
        line1[i].first = i;
        line1[i].second = Testdata[g_Testdatastep];
        line2[i].first = i;
        testee.getDirection();
        mean = testee.mGlobalMean;
        line2[i].second = mean;
        CHECK(testee.mGlobalMean <= Testdata[g_Testdatastep] + 0.000001); //Mean and Testvalues need to be the same
        CHECK(testee.mGlobalMean >= Testdata[g_Testdatastep] - 0.000001);
        i++;
    }

    /*fills half ot the window with same test Samples  (value = 2.0)*/
    /*meanold  = 1 */
    g_Testdatastep = 1;
    testsize = testsize + 0.5 * testee.mMeanRange;
    while (i < testsize) {
        line1[i].first = i;
        line1[i].second = Testdata[g_Testdatastep];
        line2[i].first = i;
        testee.getDirection();
        mean = testee.mGlobalMean;
        line2[i].second = mean;
        i++;
    }
    CHECK(testee.mGlobalMean <= 1 + 0.000001); //Mean and Testvalues need to be the same
    CHECK(testee.mGlobalMean >= 1 - 0.000001);

    /*fills half ot the window with same test Samples  (value = 1.0)*/
    /*mean old = 1.5*/
    g_Testdatastep = 0;
    testsize = testsize + 0.5 * testee.mMeanRange;
    while (i < testsize) {
        line1[i].first = i;
        line1[i].second = Testdata[g_Testdatastep];
        line2[i].first = i;
        testee.getDirection();
        mean = testee.mGlobalMean;
        line2[i].second = mean;
        i++;
    }

    /*set new testdata to value 2.0 for 2.5xwindowsize*/
    /*Meanold = 1.5*/
    g_Testdatastep = 1;
    testsize = testsize + 2.5 * testee.mMeanRange;
    while (i < testsize) {
        line1[i].first = i;
        line1[i].second = Testdata[g_Testdatastep];
        line2[i].first = i;
        testee.getDirection();
        mean = testee.mGlobalMean;
        line2[i].second = mean;
        if (i == testee.mMeanRange / 2) { // new full window
            CHECK(testee.mGlobalMean <= 1.5 + 0.000001);
            CHECK(testee.mGlobalMean >= 1.5 - 0.000001);
            CHECK(testee.mMeanold <= 1.5 + 0.000001);
            CHECK(testee.mMeanold >= 1.5 - 0.000001);
        }
        if (i == testee.mMeanRange * 1.5) { //new full window
            CHECK(testee.mGlobalMean <= 2 + 0.000001);
            CHECK(testee.mGlobalMean >= 2 - 0.000001);
            CHECK(testee.mMeanold <= 2 + 0.000001);
            CHECK(testee.mMeanold >= 2 - 0.000001);
        }

        i++;
    }

    plotLines(line1, line2);
    TestCaseEnd();
}

int main(int argc, const char* argv[])
{
    UnitTestMainBegin();
    RunTest(true, ut_StraingaugeSensor)
    RunTest(true, ut_StraingaugeSensorReset)
    /******************************disable Filter => set FILTERSIZE = 1 in StraingaugeSensor.h;******************************/
    RunTest(false, ut_StraingaugeSensorMeanTest)
    RunTest(false, ut_StraingaugeSensorMeanTest1)
    /************************************************************************************************************************/
    UnitTestMainEnd();
}
